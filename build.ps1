# <copyright file="build.ps1" company="Endjin Limited">
# Copyright (c) Endjin Limited. All rights reserved.
# </copyright>

<#
.SYNOPSIS
    Runs a .NET flavoured build process.
.DESCRIPTION
    This script was scaffolded using a template from the Endjin.RecommendedPractices.Build PowerShell module.
    It uses the InvokeBuild module to orchestrate an opinonated software build process for .NET solutions.
.EXAMPLE
    PS C:\> ./build.ps1
    Downloads any missing module dependencies (Endjin.RecommendedPractices.Build & InvokeBuild) and executes
    the build process.
.PARAMETER Tasks
    Optionally override the default task executed as the entrypoing of the build.
.PARAMETER Configuration
    The build configuration, defaults to 'Release'.
.PARAMETER BuildRepositoryUri
    Optional URI that supports pulling MSBuild logic from a web enbdpoint (e.g. a GitHub blob).
.PARAMETER SourcesDir
    The path where the source code to be built is located.
.PARAMETER CoverageDir
    The output path for the test coverage data, if run.
.PARAMETER TestReportTypes
    The test report format that should be generated by the test report generator, if run.
.PARAMETER PackagesDir
    The output path for any packages produced as part of the build.
.PARAMETER LogLevel
    The logging verbosity.
.PARAMETER Clean
    When true, the .NET solution will be cleaned before compilation.
.PARAMETER RecommendedPracticesModulePath
    The path to import the Endjin.RecommendedPractices.Build module from. This is useful when
    testing pre-release versions of the Endjin.RecommendedPractices.Build that are not yet
    available in the PowerShell Gallery.
#>
[CmdletBinding()]
param (
    [Parameter(Position=0)]
    [string[]] $Tasks = @("."),

    [Parameter()]
    [string] $Configuration = "Release",

    [Parameter()]
    [string] $BuildRepositoryUri = "",

    [Parameter()]
    [string] $SourcesDir = $PWD,

    [Parameter()]
    [string] $CoverageDir = "_codeCoverage",

    [Parameter()]
    [string] $TestReportTypes = "Cobertura",

    [Parameter()]
    [string] $PackagesDir = "_packages",

    [Parameter()]
    [ValidateSet("minimal","normal","detailed")]
    [string] $LogLevel = "minimal",

    [Parameter()]
    [switch] $Clean,

    [Parameter()]
    [string] $RecommendedPracticesModulePath
)

$ErrorActionPreference = 'Stop'
$InformationPreference = $InformationAction ? $InformationAction : 'Continue'

$here = Split-Path -Parent $PSCommandPath

#region InvokeBuild setup
if (!(Get-Module -ListAvailable InvokeBuild)) {
    Install-Module InvokeBuild -RequiredVersion 5.7.1 -Scope CurrentUser -Force -Repository PSGallery
}
Import-Module InvokeBuild
# This handles calling the build engine when this file is run like a normal PowerShell script
# (i.e. avoids the need to have another script to setup the InvokeBuild environment and issue the 'Invoke-Build' command )
if ($MyInvocation.ScriptName -notlike '*Invoke-Build.ps1') {
    try {
        Invoke-Build $Tasks $MyInvocation.MyCommand.Path @PSBoundParameters
    }
    catch {
        $_.ScriptStackTrace
        throw
    }
    return
}
#endregion

# Import shared tasks and initialise build framework
if (!($RecommendedPracticesModulePath)) {
    if (!(Get-Module -ListAvailable Endjin.RecommendedPractices.Build)) {
        Write-Information "Installing 'Endjin.RecommendedPractices.Build' module..."
        Install-Module Endjin.RecommendedPractices.Build -RequiredVersion 0.1.0-beta0003 -AllowPrerelease -Scope CurrentUser -Force -Repository PSGallery
    }
    $RecommendedPracticesModulePath = "Endjin.RecommendedPractices.Build"
}
else {
    Write-Information "RecommendedPracticesModulePath: $RecommendedPracticesModulePath"
}
Import-Module $RecommendedPracticesModulePath -Force
. Endjin.RecommendedPractices.Build.tasks


# build variables
$SolutionToBuild = (Resolve-Path (Join-Path $here "Solutions/Corvus.Deployment.PowerBi.Cli.sln")).Path
$SkipTests = $true
$CleanBuild = $true

# Advanced build settings
$EnableGitVersionAdoVariableWorkaround = $false
$GitVersionToolVersion = "5.7.0"

# Synopsis: Build, Test and Package
task . FullBuild

# extensibility tasks
task PreBuild {
    Get-Location | fl | out-string | Write-Information
    exec {tree}
}
task PostBuild {}
task PreTest {}
task PostTest {}
task PreTestReport {}
task PostTestReport {}
task PrePackage {}
task PostPackage {}

task FixFSCase -After RestorePackages {
    if ($IsLinux) {
        $pathToFix = "$($env:HOME)/.nuget/packages/microsoft.analysisservices.netcore.retail.amd64/19.24.4/lib/netcoreapp3.0"
        ls -la $pathToFix
        Write-Build Green "Fixing case of 'zh-HANS' & 'zh-HANT' resource folders"
        mv $pathToFix/zh-HANS $pathToFix/zh-Hans
        mv $pathToFix/zh-HANT $pathToFix/zh-Hant
        ls -la $pathToFix
    }
}

trap {
    Get-Location | Format-List | Out-String | Write-Information
    if (Get-Command "tree" -ea 0) { & tree }
}

function Set-BuildServerVariable
{
    [CmdletBinding()]
    param (
        [Parameter(Mandatory=$true)]
        [string] $Name,

        [Parameter(Mandatory=$true)]
        [AllowNull()]
        $Value
    )

    if ($env:TF_BUILD) {
        Write-Information "##vso[task.setvariable variable=$Name]$Value" -InformationAction Continue
    }
    elseif ($env:GITHUB_ACTIONS) {
        Write-Information "`n::set-output name=$Name::$Value" -InformationAction Continue
    }
}
